/* Inspired from the use case example presented at http://tynerblain.com/blog/2007/04/09/sample-use-case-example/ */

#include <inc.FDL>  /* Project include file. Open with Ctrl+P and file name. */

/* Specify the actors for the use case. This example uses a two tier
architecture with components and objects (eternal and dynamic). 
EventStudio lets you specify a up to 5 tiers with system, subsystem, module,
component and eternal/dynamic objects. */

component: Home, Frontend, Backend
eternal: Shopper in Home
dynamic: Session in Frontend
eternal: Store in Frontend
eternal: FulfillmentSystem in Backend, BillingSystem in Backend

{MyTheme} feature "Place Order" {
|= Triggers

- The user indicates that she wants to purchase items that she has selected.=|

|= Use Case Description

After the user has selected items to purchase and then order the items. 
The user provides payment and shipping information. The system responds with confirmation 
of the order and a tracking number that the user can use to check on order status in the future. 
The system also provides the user with an estimated delivery date for the order. The user may 
already have an account with the company with billing and shipping information.=|

/* Specify preconditions and postconditions for use cases using the blocks by the same name. 
A precondition example is shown below. A postconditions block is shown towards the end
of the flow. */
preconditions {
  Shopper creates Session
  Shopper, Store state= "User has selected the items to be purchased."
}

Order : Shopper -> Store
% The user indicates that she wants to order the items that have already been selected.

"Display Billing and Shipping Information" : Shopper <- Store
% The system presents the billing and shipping information that the user had stored previously.

/* Alternative scenarios are specified in the same document using a C preprocessor style
ifdef-ifndef based conditional definition. The conditionals specified here are then defined
in different scenarios specified in the project.scn.json file. */

#ifdef USER_SPECIFIES_BILLING_AND_SHIPPING
  sequence "Alternate: User changes shipping and billing" {  
  |= The user enters billing and shipping information for the order. The user desires to use shipping and billing 
  information that differs from the information stored in her account. This alternate flow also applies if the user
  does not maintain billing and / or shipping information in their account, or if the user does not have an account.=|

  "Will Use Alternative Billing" : Shopper -> Store
  % The user indicates that this order should use alternate billing or shipping information.

  "Enter Billing and Shipping Information": Shopper -> Store
  % The user enters billing and shipping information for this order.

  Store action "Validate the billing and shipping information"
  % Validate the newly entered billing and shipping information
}
#else  
   /* Normal Flow */
  "Confirm Billing and Shipping Information": Shopper -> Store
  % The user confirms that the existing billing and shipping information should be used for this order.
#endif

"Display Total Cost" +
"= Product Cost +" +
"Applicable Taxes +" +
Shipping : Shopper <- Store
% The system presents the amount that the order will cost, including applicable taxes and shipping charges.

#ifdef USER_DISCOVERS_BILLING_OR_SHIPPING_ADDRESS_ERROR
sequence "Alternate: User discovers billing error"{
  |= The user discovers an error in the billing or shipping information associated with their account, and changes it.=|
  "Billing and Shipping Information is incorrect" : Shopper -> Store
  % The user indicates that the billing and shipping information is incorrect.

  "Edit Billing and Shipping Information": Shopper -> Store
  % The user edits the billing and shipping information associated with their account.

  Store action "Validate the billing and shipping information"
  % The system validates the billing and shipping information.
}
#else 
  /* Normal Flow */
  "Confirm Order Information" : Shopper -> Store
  % The user confirms that the order information is accurate.
#endif
"Display Tracking Id for the Order" : Shopper <- Store
% The system provides the user with a tracking ID for the order.

"Submit Order" : Store -> FulfillmentSystem
% The system submits the order to the fulfillment system for evaluation.

"Provide Delivery Estimate Date": Store <- FulfillmentSystem
% The fulfillment system provides the system with an estimated delivery date.

"Display Delivery Estimate Date" ("Shipping Date", "Delivery Date"): Shopper <- Store
% The system presents the estimated delivery date to the user.

#ifdef USER_CANCELS_ORDER
  sequence "Alternate: User Cancels Order" {
    |= The user determines that the order is not acceptable (perhaps due to 
    dissatisfaction with the estimated delivery date) and cancels the order. =|
    "Cancel Order": Shopper => Store
    % The user requests that the order be cancelled.

    "Cancel Order" : Store -> FulfillmentSystem
    % Cancel the order with the fulfillment system
    
    "Order Cancel Confirmation": Shopper <= Store
    % The system confirms that the order has been cancelled.
  }
  
#else
  "Confirm Order Placement": Shopper -> Store
  % The user indicates that the order should be placed.
  
  "Charge For Order" ("Total Amount"): Store -> BillingSystem 
  % The system requests that the billing system should charge the user for the order.

  "Order Charged": Store <- BillingSystem 
  % The billing system confirms that the charge has been placed for the order.

  "Fulfill Order": Store -> FulfillmentSystem
  % The system submits the order to the fulfillment system for processing.

  "Fulfillment In Progress" : Store <- FulfillmentSystem 
  % The fulfillment system confirms that the order is being processed.

  "Order Charged" : Shopper <- Store
  % The system indicates to the user that the user has been charged for the order.

  "Order Placed": Shopper <- Store
  % The system indicates to the user that the order has been placed.
#endif
  Shopper deletes Session
  % The user exits the system.

  postconditions {
#ifndef USER_CANCELS_ORDER  
    /* Successful order*/
    Frontend, Backend state = "Order in System"
    % Order has been placed in the system

    Shopper state = "Knows Tracking Id"
    % The user has been assigned a tracking ID for the order.

    Shopper state = "Knows Estimated Delivery Date"
    % The user has been informed about the estimated delivery date for the order.

#else  
    /* Cancelled Order */
    Frontend, Backend state = "No New Order"
#endif
  }
}