/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CampaignListInterface extends ethers.utils.Interface {
  functions: {
    "_tokenCampaigns(address)": FunctionFragment;
    "allOwnersCampaigns()": FunctionFragment;
    "campaignAt(uint256)": FunctionFragment;
    "campaignCreationPrice()": FunctionFragment;
    "campaignSize()": FunctionFragment;
    "contains(uint256)": FunctionFragment;
    "createNewCampaign(address,uint256[8],uint8,address,uint256[4],tuple[8],tuple[8])": FunctionFragment;
    "hasExistingCampaign(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCampaignCreationPrice(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tryGetCampaignByKey(uint256)": FunctionFragment;
    "tryGetCampaignByTokenAddress(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_tokenCampaigns",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allOwnersCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCreationPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewCampaign",
    values: [
      string,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish,
      string,
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        }
      ],
      [
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        }
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasExistingCampaign",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaignCreationPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tryGetCampaignByKey",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tryGetCampaignByTokenAddress",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_tokenCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allOwnersCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaignAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "campaignCreationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNewCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasExistingCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCampaignCreationPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryGetCampaignByKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tryGetCampaignByTokenAddress",
    data: BytesLike
  ): Result;

  events: {
    "CampaignCreated(address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class CampaignList extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CampaignListInterface;

  functions: {
    _tokenCampaigns(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    allOwnersCampaigns(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    campaignAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { key: BigNumber; value: string }>;

    campaignCreationPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    campaignSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    contains(key: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    createNewCampaign(
      _tokenAddress: string,
      capAndDate: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _refundType: BigNumberish,
      _dexRouterAddress: string,
      liquidityAllocationAndRates: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      teamTokenVestingDetails: [
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        }
      ],
      raisedFundVestingDetails: [
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        }
      ],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasExistingCampaign(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCampaignCreationPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tryGetCampaignByKey(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    tryGetCampaignByTokenAddress(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  _tokenCampaigns(arg0: string, overrides?: CallOverrides): Promise<string>;

  allOwnersCampaigns(overrides?: CallOverrides): Promise<BigNumber[]>;

  campaignAt(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { key: BigNumber; value: string }>;

  campaignCreationPrice(overrides?: CallOverrides): Promise<BigNumber>;

  campaignSize(overrides?: CallOverrides): Promise<BigNumber>;

  contains(key: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  createNewCampaign(
    _tokenAddress: string,
    capAndDate: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    _refundType: BigNumberish,
    _dexRouterAddress: string,
    liquidityAllocationAndRates: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    teamTokenVestingDetails: [
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      }
    ],
    raisedFundVestingDetails: [
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      },
      {
        releaseDate: BigNumberish;
        releaseAmount: BigNumberish;
        hasBeenClaimed: boolean;
      }
    ],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasExistingCampaign(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCampaignCreationPrice(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tryGetCampaignByKey(
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  tryGetCampaignByTokenAddress(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    _tokenCampaigns(arg0: string, overrides?: CallOverrides): Promise<string>;

    allOwnersCampaigns(overrides?: CallOverrides): Promise<BigNumber[]>;

    campaignAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { key: BigNumber; value: string }>;

    campaignCreationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    campaignSize(overrides?: CallOverrides): Promise<BigNumber>;

    contains(key: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    createNewCampaign(
      _tokenAddress: string,
      capAndDate: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _refundType: BigNumberish,
      _dexRouterAddress: string,
      liquidityAllocationAndRates: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      teamTokenVestingDetails: [
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        }
      ],
      raisedFundVestingDetails: [
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        }
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    hasExistingCampaign(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCampaignCreationPrice(
      newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tryGetCampaignByKey(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    tryGetCampaignByTokenAddress(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    CampaignCreated(
      creator?: string | null,
      index?: BigNumberish | null,
      createdCampaignAddress?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { creator: string; index: BigNumber; createdCampaignAddress: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    _tokenCampaigns(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allOwnersCampaigns(overrides?: CallOverrides): Promise<BigNumber>;

    campaignAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignCreationPrice(overrides?: CallOverrides): Promise<BigNumber>;

    campaignSize(overrides?: CallOverrides): Promise<BigNumber>;

    contains(key: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    createNewCampaign(
      _tokenAddress: string,
      capAndDate: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _refundType: BigNumberish,
      _dexRouterAddress: string,
      liquidityAllocationAndRates: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      teamTokenVestingDetails: [
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        }
      ],
      raisedFundVestingDetails: [
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        }
      ],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasExistingCampaign(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCampaignCreationPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tryGetCampaignByKey(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tryGetCampaignByTokenAddress(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _tokenCampaigns(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allOwnersCampaigns(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignCreationPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contains(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createNewCampaign(
      _tokenAddress: string,
      capAndDate: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _refundType: BigNumberish,
      _dexRouterAddress: string,
      liquidityAllocationAndRates: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      teamTokenVestingDetails: [
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        }
      ],
      raisedFundVestingDetails: [
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        },
        {
          releaseDate: BigNumberish;
          releaseAmount: BigNumberish;
          hasBeenClaimed: boolean;
        }
      ],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasExistingCampaign(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCampaignCreationPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tryGetCampaignByKey(
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tryGetCampaignByTokenAddress(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
