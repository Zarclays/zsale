/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CampaignInterface extends ethers.utils.Interface {
  functions: {
    "_campaignFactory()": FunctionFragment;
    "addWhitelistTwo(address)": FunctionFragment;
    "buyInAllTiers(address)": FunctionFragment;
    "buyInOneTier(address)": FunctionFragment;
    "buyInTwoTier(address)": FunctionFragment;
    "cancelCampaign()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "dexLockerAddress()": FunctionFragment;
    "dexRouterAddress()": FunctionFragment;
    "end()": FunctionFragment;
    "finalizeAndSetupLiquidity()": FunctionFragment;
    "getCampaignInfo()": FunctionFragment;
    "getCampaignPeriod()": FunctionFragment;
    "getCampaignSalePriceInfo()": FunctionFragment;
    "getCampaignStatus()": FunctionFragment;
    "hasFailed()": FunctionFragment;
    "hasKYC()": FunctionFragment;
    "isAllowedInTier1(address)": FunctionFragment;
    "isAudited()": FunctionFragment;
    "isInTier1WhiteList(address)": FunctionFragment;
    "isInTier2WhiteList(address)": FunctionFragment;
    "isSoldOut()": FunctionFragment;
    "liquidityReleaseTime()": FunctionFragment;
    "maxAllocationPerUserTierOne()": FunctionFragment;
    "maxAllocationPerUserTierTwo()": FunctionFragment;
    "otherInfo()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "saleInfo()": FunctionFragment;
    "setAudited(bool)": FunctionFragment;
    "setKYC(bool)": FunctionFragment;
    "setTier1TimeLineInHours(uint256)": FunctionFragment;
    "status()": FunctionFragment;
    "tierOnehardCap()": FunctionFragment;
    "tierTwohardCap()": FunctionFragment;
    "totalCoinInTierOne()": FunctionFragment;
    "totalCoinInTierTwo()": FunctionFragment;
    "totalCoinReceived()": FunctionFragment;
    "totalParticipants()": FunctionFragment;
    "totalTokensExpectedToBeLocked()": FunctionFragment;
    "totalUserInTierOne()": FunctionFragment;
    "totalUserInTierTwo()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCampaignDetails(bool,string,string,string,string,string)": FunctionFragment;
    "updateTierDetails(uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdrawFunds()": FunctionFragment;
    "zsalesTokenAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_campaignFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistTwo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyInAllTiers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyInOneTier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyInTwoTier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelCampaign",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "dexLockerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dexRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finalizeAndSetupLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignSalePriceInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasFailed", values?: undefined): string;
  encodeFunctionData(functionFragment: "hasKYC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAllowedInTier1",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isAudited", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isInTier1WhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isInTier2WhiteList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isSoldOut", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidityReleaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAllocationPerUserTierOne",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxAllocationPerUserTierTwo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "otherInfo", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "saleInfo", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAudited", values: [boolean]): string;
  encodeFunctionData(functionFragment: "setKYC", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setTier1TimeLineInHours",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tierOnehardCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tierTwohardCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCoinInTierOne",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCoinInTierTwo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCoinReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalParticipants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensExpectedToBeLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUserInTierOne",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUserInTierTwo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCampaignDetails",
    values: [boolean, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTierDetails",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zsalesTokenAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_campaignFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyInAllTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyInOneTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyInTwoTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dexLockerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dexRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAndSetupLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignSalePriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasFailed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasKYC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAllowedInTier1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAudited", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInTier1WhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInTier2WhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSoldOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAllocationPerUserTierOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxAllocationPerUserTierTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "otherInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAudited", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKYC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTier1TimeLineInHours",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tierOnehardCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tierTwohardCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCoinInTierOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCoinInTierTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCoinReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensExpectedToBeLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUserInTierOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUserInTierTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCampaignDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTierDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zsalesTokenAddress",
    data: BytesLike
  ): Result;

  events: {
    "AdminOwnershipTransferred(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Refunded(address,uint256)": EventFragment;
    "SoldOut()": EventFragment;
    "ValueReceived(address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminOwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SoldOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValueReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class Campaign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CampaignInterface;

  functions: {
    _campaignFactory(overrides?: CallOverrides): Promise<[string]>;

    addWhitelistTwo(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyInAllTiers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyInOneTier(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyInTwoTier(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dexLockerAddress(overrides?: CallOverrides): Promise<[string]>;

    dexRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    end(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalizeAndSetupLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCampaignInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        _tokenAddress: string;
        softcap: BigNumber;
        hardcap: BigNumber;
        saleStartTime: BigNumber;
        saleEndTime: BigNumber;
        listRate: BigNumber;
        dexListRate: BigNumber;
        totalCoins: BigNumber;
        totalParticipant: BigNumber;
        useWhiteList: boolean;
        hasKyc: boolean;
        isAuditd: boolean;
      }
    >;

    getCampaignPeriod(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        saleStartTime: BigNumber;
        saleEndTime: BigNumber;
      }
    >;

    getCampaignSalePriceInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getCampaignStatus(overrides?: CallOverrides): Promise<[number]>;

    hasFailed(overrides?: CallOverrides): Promise<[boolean]>;

    hasKYC(overrides?: CallOverrides): Promise<[boolean]>;

    isAllowedInTier1(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAudited(overrides?: CallOverrides): Promise<[boolean, string]>;

    isInTier1WhiteList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInTier2WhiteList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSoldOut(overrides?: CallOverrides): Promise<[boolean]>;

    liquidityReleaseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAllocationPerUserTierOne(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxAllocationPerUserTierTwo(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    otherInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        string,
        number,
        string,
        string,
        string,
        string,
        string
      ] & {
        useWhiteList: boolean;
        hasKYC: boolean;
        isAudited: boolean;
        auditUrl: string;
        refundType: number;
        logoUrl: string;
        desc: string;
        website: string;
        twitter: string;
        telegram: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saleInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tokenAddress: string;
        softCap: BigNumber;
        hardCap: BigNumber;
        saleStartTime: BigNumber;
        saleEndTime: BigNumber;
        liquidityPercent: BigNumber;
        listRate: BigNumber;
        dexListRate: BigNumber;
      }
    >;

    setAudited(
      audit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKYC(
      kyc: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTier1TimeLineInHours(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    status(overrides?: CallOverrides): Promise<[number]>;

    tierOnehardCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    tierTwohardCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCoinInTierOne(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCoinInTierTwo(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCoinReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalParticipants(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalTokensExpectedToBeLocked(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalUserInTierOne(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUserInTierTwo(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCampaignDetails(
      _useWhiteList: boolean,
      logoUrl: string,
      desc: string,
      website: string,
      twitter: string,
      telegram: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTierDetails(
      _tierOneHardCap: BigNumberish,
      _tierTwoHardCap: BigNumberish,
      _maxAllocationPerUserTierOne: BigNumberish,
      _maxAllocationPerUserTierTwo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zsalesTokenAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  _campaignFactory(overrides?: CallOverrides): Promise<string>;

  addWhitelistTwo(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyInAllTiers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyInOneTier(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyInTwoTier(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  cancelCampaign(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dexLockerAddress(overrides?: CallOverrides): Promise<string>;

  dexRouterAddress(overrides?: CallOverrides): Promise<string>;

  end(overrides?: CallOverrides): Promise<BigNumber>;

  finalizeAndSetupLiquidity(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCampaignInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean
    ] & {
      _tokenAddress: string;
      softcap: BigNumber;
      hardcap: BigNumber;
      saleStartTime: BigNumber;
      saleEndTime: BigNumber;
      listRate: BigNumber;
      dexListRate: BigNumber;
      totalCoins: BigNumber;
      totalParticipant: BigNumber;
      useWhiteList: boolean;
      hasKyc: boolean;
      isAuditd: boolean;
    }
  >;

  getCampaignPeriod(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      saleStartTime: BigNumber;
      saleEndTime: BigNumber;
    }
  >;

  getCampaignSalePriceInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getCampaignStatus(overrides?: CallOverrides): Promise<number>;

  hasFailed(overrides?: CallOverrides): Promise<boolean>;

  hasKYC(overrides?: CallOverrides): Promise<boolean>;

  isAllowedInTier1(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAudited(overrides?: CallOverrides): Promise<[boolean, string]>;

  isInTier1WhiteList(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isInTier2WhiteList(
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSoldOut(overrides?: CallOverrides): Promise<boolean>;

  liquidityReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

  maxAllocationPerUserTierOne(overrides?: CallOverrides): Promise<BigNumber>;

  maxAllocationPerUserTierTwo(overrides?: CallOverrides): Promise<BigNumber>;

  otherInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      boolean,
      string,
      number,
      string,
      string,
      string,
      string,
      string
    ] & {
      useWhiteList: boolean;
      hasKYC: boolean;
      isAudited: boolean;
      auditUrl: string;
      refundType: number;
      logoUrl: string;
      desc: string;
      website: string;
      twitter: string;
      telegram: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saleInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      tokenAddress: string;
      softCap: BigNumber;
      hardCap: BigNumber;
      saleStartTime: BigNumber;
      saleEndTime: BigNumber;
      liquidityPercent: BigNumber;
      listRate: BigNumber;
      dexListRate: BigNumber;
    }
  >;

  setAudited(
    audit: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKYC(
    kyc: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTier1TimeLineInHours(
    newValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  status(overrides?: CallOverrides): Promise<number>;

  tierOnehardCap(overrides?: CallOverrides): Promise<BigNumber>;

  tierTwohardCap(overrides?: CallOverrides): Promise<BigNumber>;

  totalCoinInTierOne(overrides?: CallOverrides): Promise<BigNumber>;

  totalCoinInTierTwo(overrides?: CallOverrides): Promise<BigNumber>;

  totalCoinReceived(overrides?: CallOverrides): Promise<BigNumber>;

  totalParticipants(overrides?: CallOverrides): Promise<BigNumber>;

  totalTokensExpectedToBeLocked(overrides?: CallOverrides): Promise<BigNumber>;

  totalUserInTierOne(overrides?: CallOverrides): Promise<BigNumber>;

  totalUserInTierTwo(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCampaignDetails(
    _useWhiteList: boolean,
    logoUrl: string,
    desc: string,
    website: string,
    twitter: string,
    telegram: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTierDetails(
    _tierOneHardCap: BigNumberish,
    _tierTwoHardCap: BigNumberish,
    _maxAllocationPerUserTierOne: BigNumberish,
    _maxAllocationPerUserTierTwo: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zsalesTokenAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _campaignFactory(overrides?: CallOverrides): Promise<string>;

    addWhitelistTwo(_address: string, overrides?: CallOverrides): Promise<void>;

    buyInAllTiers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyInOneTier(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyInTwoTier(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelCampaign(overrides?: CallOverrides): Promise<void>;

    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    dexLockerAddress(overrides?: CallOverrides): Promise<string>;

    dexRouterAddress(overrides?: CallOverrides): Promise<string>;

    end(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeAndSetupLiquidity(overrides?: CallOverrides): Promise<void>;

    getCampaignInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        _tokenAddress: string;
        softcap: BigNumber;
        hardcap: BigNumber;
        saleStartTime: BigNumber;
        saleEndTime: BigNumber;
        listRate: BigNumber;
        dexListRate: BigNumber;
        totalCoins: BigNumber;
        totalParticipant: BigNumber;
        useWhiteList: boolean;
        hasKyc: boolean;
        isAuditd: boolean;
      }
    >;

    getCampaignPeriod(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        saleStartTime: BigNumber;
        saleEndTime: BigNumber;
      }
    >;

    getCampaignSalePriceInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getCampaignStatus(overrides?: CallOverrides): Promise<number>;

    hasFailed(overrides?: CallOverrides): Promise<boolean>;

    hasKYC(overrides?: CallOverrides): Promise<boolean>;

    isAllowedInTier1(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAudited(overrides?: CallOverrides): Promise<[boolean, string]>;

    isInTier1WhiteList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isInTier2WhiteList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSoldOut(overrides?: CallOverrides): Promise<boolean>;

    liquidityReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxAllocationPerUserTierOne(overrides?: CallOverrides): Promise<BigNumber>;

    maxAllocationPerUserTierTwo(overrides?: CallOverrides): Promise<BigNumber>;

    otherInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        string,
        number,
        string,
        string,
        string,
        string,
        string
      ] & {
        useWhiteList: boolean;
        hasKYC: boolean;
        isAudited: boolean;
        auditUrl: string;
        refundType: number;
        logoUrl: string;
        desc: string;
        website: string;
        twitter: string;
        telegram: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    saleInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        tokenAddress: string;
        softCap: BigNumber;
        hardCap: BigNumber;
        saleStartTime: BigNumber;
        saleEndTime: BigNumber;
        liquidityPercent: BigNumber;
        listRate: BigNumber;
        dexListRate: BigNumber;
      }
    >;

    setAudited(audit: boolean, overrides?: CallOverrides): Promise<void>;

    setKYC(kyc: boolean, overrides?: CallOverrides): Promise<void>;

    setTier1TimeLineInHours(
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    status(overrides?: CallOverrides): Promise<number>;

    tierOnehardCap(overrides?: CallOverrides): Promise<BigNumber>;

    tierTwohardCap(overrides?: CallOverrides): Promise<BigNumber>;

    totalCoinInTierOne(overrides?: CallOverrides): Promise<BigNumber>;

    totalCoinInTierTwo(overrides?: CallOverrides): Promise<BigNumber>;

    totalCoinReceived(overrides?: CallOverrides): Promise<BigNumber>;

    totalParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokensExpectedToBeLocked(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalUserInTierOne(overrides?: CallOverrides): Promise<BigNumber>;

    totalUserInTierTwo(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCampaignDetails(
      _useWhiteList: boolean,
      logoUrl: string,
      desc: string,
      website: string,
      twitter: string,
      telegram: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTierDetails(
      _tierOneHardCap: BigNumberish,
      _tierTwoHardCap: BigNumberish,
      _maxAllocationPerUserTierOne: BigNumberish,
      _maxAllocationPerUserTierTwo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;

    zsalesTokenAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AdminOwnershipTransferred(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Refunded(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    SoldOut(): TypedEventFilter<[], {}>;

    ValueReceived(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Withdrawn(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    _campaignFactory(overrides?: CallOverrides): Promise<BigNumber>;

    addWhitelistTwo(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyInAllTiers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyInOneTier(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyInTwoTier(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cancelCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dexLockerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    dexRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    end(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeAndSetupLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCampaignInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getCampaignPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getCampaignSalePriceInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getCampaignStatus(overrides?: CallOverrides): Promise<BigNumber>;

    hasFailed(overrides?: CallOverrides): Promise<BigNumber>;

    hasKYC(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowedInTier1(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAudited(overrides?: CallOverrides): Promise<BigNumber>;

    isInTier1WhiteList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInTier2WhiteList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSoldOut(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxAllocationPerUserTierOne(overrides?: CallOverrides): Promise<BigNumber>;

    maxAllocationPerUserTierTwo(overrides?: CallOverrides): Promise<BigNumber>;

    otherInfo(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saleInfo(overrides?: CallOverrides): Promise<BigNumber>;

    setAudited(
      audit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKYC(
      kyc: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTier1TimeLineInHours(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    tierOnehardCap(overrides?: CallOverrides): Promise<BigNumber>;

    tierTwohardCap(overrides?: CallOverrides): Promise<BigNumber>;

    totalCoinInTierOne(overrides?: CallOverrides): Promise<BigNumber>;

    totalCoinInTierTwo(overrides?: CallOverrides): Promise<BigNumber>;

    totalCoinReceived(overrides?: CallOverrides): Promise<BigNumber>;

    totalParticipants(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokensExpectedToBeLocked(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalUserInTierOne(overrides?: CallOverrides): Promise<BigNumber>;

    totalUserInTierTwo(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCampaignDetails(
      _useWhiteList: boolean,
      logoUrl: string,
      desc: string,
      website: string,
      twitter: string,
      telegram: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTierDetails(
      _tierOneHardCap: BigNumberish,
      _tierTwoHardCap: BigNumberish,
      _maxAllocationPerUserTierOne: BigNumberish,
      _maxAllocationPerUserTierTwo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zsalesTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _campaignFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addWhitelistTwo(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyInAllTiers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyInOneTier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyInTwoTier(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelCampaign(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dexLockerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexRouterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    end(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeAndSetupLiquidity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCampaignInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCampaignPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCampaignSalePriceInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCampaignStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasFailed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasKYC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAllowedInTier1(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAudited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isInTier1WhiteList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInTier2WhiteList(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSoldOut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityReleaseTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAllocationPerUserTierOne(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxAllocationPerUserTierTwo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    otherInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saleInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAudited(
      audit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKYC(
      kyc: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTier1TimeLineInHours(
      newValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tierOnehardCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tierTwohardCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCoinInTierOne(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCoinInTierTwo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCoinReceived(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalParticipants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTokensExpectedToBeLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUserInTierOne(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalUserInTierTwo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCampaignDetails(
      _useWhiteList: boolean,
      logoUrl: string,
      desc: string,
      website: string,
      twitter: string,
      telegram: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTierDetails(
      _tierOneHardCap: BigNumberish,
      _tierTwoHardCap: BigNumberish,
      _maxAllocationPerUserTierOne: BigNumberish,
      _maxAllocationPerUserTierTwo: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zsalesTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
