/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Campaign",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Campaign__factory>;
    getContractFactory(
      name: "CampaignList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CampaignList__factory>;
    getContractFactory(
      name: "Greeter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Greeter__factory>;
    getContractFactory(
      name: "Greeter2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Greeter2__factory>;
    getContractFactory(
      name: "IDexFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDexFactory__factory>;
    getContractFactory(
      name: "IDexRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDexRouter__factory>;
    getContractFactory(
      name: "CoinLocker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoinLocker__factory>;
    getContractFactory(
      name: "DexLocker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexLocker__factory>;
    getContractFactory(
      name: "DexLockerFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DexLockerFactory__factory>;
    getContractFactory(
      name: "LiquidityLocker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityLocker__factory>;
    getContractFactory(
      name: "TokenLocker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenLocker__factory>;
    getContractFactory(
      name: "Migration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migration__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "Token2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token2__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
